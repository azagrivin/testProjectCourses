// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE5a98965DecodeGithubComAzagrivinTestProjectCoursesInternalModels(in *jlexer.Lexer, out *HistoryCurrencies) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total":
			out.Total = uint32(in.Uint32())
		case "history":
			if in.IsNull() {
				in.Skip()
				out.History = nil
			} else {
				in.Delim('[')
				if out.History == nil {
					if !in.IsDelim(']') {
						out.History = make([]History, 0, 8)
					} else {
						out.History = []History{}
					}
				} else {
					out.History = (out.History)[:0]
				}
				for !in.IsDelim(']') {
					var v1 History
					(v1).UnmarshalEasyJSON(in)
					out.History = append(out.History, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE5a98965EncodeGithubComAzagrivinTestProjectCoursesInternalModels(out *jwriter.Writer, in HistoryCurrencies) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Total))
	}
	{
		const prefix string = ",\"history\":"
		out.RawString(prefix)
		if in.History == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.History {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HistoryCurrencies) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE5a98965EncodeGithubComAzagrivinTestProjectCoursesInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HistoryCurrencies) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE5a98965EncodeGithubComAzagrivinTestProjectCoursesInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HistoryCurrencies) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE5a98965DecodeGithubComAzagrivinTestProjectCoursesInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HistoryCurrencies) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE5a98965DecodeGithubComAzagrivinTestProjectCoursesInternalModels(l, v)
}
func easyjsonE5a98965DecodeGithubComAzagrivinTestProjectCoursesInternalModels1(in *jlexer.Lexer, out *History) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(History)
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v4 interface{}
			if m, ok := v4.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := v4.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				v4 = in.Interface()
			}
			(*out)[key] = v4
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE5a98965EncodeGithubComAzagrivinTestProjectCoursesInternalModels1(out *jwriter.Writer, in History) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v5First := true
		for v5Name, v5Value := range in {
			if v5First {
				v5First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v5Name))
			out.RawByte(':')
			if m, ok := v5Value.(easyjson.Marshaler); ok {
				m.MarshalEasyJSON(out)
			} else if m, ok := v5Value.(json.Marshaler); ok {
				out.Raw(m.MarshalJSON())
			} else {
				out.Raw(json.Marshal(v5Value))
			}
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v History) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE5a98965EncodeGithubComAzagrivinTestProjectCoursesInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v History) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE5a98965EncodeGithubComAzagrivinTestProjectCoursesInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *History) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE5a98965DecodeGithubComAzagrivinTestProjectCoursesInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *History) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE5a98965DecodeGithubComAzagrivinTestProjectCoursesInternalModels1(l, v)
}
func easyjsonE5a98965DecodeGithubComAzagrivinTestProjectCoursesInternalModels2(in *jlexer.Lexer, out *Currency) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "CodeID":
			out.CodeID = uint32(in.Uint32())
		case "CodeStr":
			out.CodeStr = string(in.String())
		case "Value":
			out.Value = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE5a98965EncodeGithubComAzagrivinTestProjectCoursesInternalModels2(out *jwriter.Writer, in Currency) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Time\":"
		out.RawString(prefix[1:])
		out.Raw((in.Time).MarshalJSON())
	}
	{
		const prefix string = ",\"CodeID\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.CodeID))
	}
	{
		const prefix string = ",\"CodeStr\":"
		out.RawString(prefix)
		out.String(string(in.CodeStr))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.Float64(float64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Currency) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE5a98965EncodeGithubComAzagrivinTestProjectCoursesInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Currency) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE5a98965EncodeGithubComAzagrivinTestProjectCoursesInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Currency) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE5a98965DecodeGithubComAzagrivinTestProjectCoursesInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Currency) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE5a98965DecodeGithubComAzagrivinTestProjectCoursesInternalModels2(l, v)
}
