// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson71102b77DecodeGithubComAzagrivinTestProjectCoursesInternalModels(in *jlexer.Lexer, out *HistoryBtcusdt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total":
			out.Total = uint32(in.Uint32())
		case "history":
			if in.IsNull() {
				in.Skip()
				out.History = nil
			} else {
				in.Delim('[')
				if out.History == nil {
					if !in.IsDelim(']') {
						out.History = make([]*Btcusdt, 0, 8)
					} else {
						out.History = []*Btcusdt{}
					}
				} else {
					out.History = (out.History)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Btcusdt
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Btcusdt)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.History = append(out.History, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71102b77EncodeGithubComAzagrivinTestProjectCoursesInternalModels(out *jwriter.Writer, in HistoryBtcusdt) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Total))
	}
	{
		const prefix string = ",\"history\":"
		out.RawString(prefix)
		if in.History == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.History {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HistoryBtcusdt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson71102b77EncodeGithubComAzagrivinTestProjectCoursesInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HistoryBtcusdt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson71102b77EncodeGithubComAzagrivinTestProjectCoursesInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HistoryBtcusdt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson71102b77DecodeGithubComAzagrivinTestProjectCoursesInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HistoryBtcusdt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson71102b77DecodeGithubComAzagrivinTestProjectCoursesInternalModels(l, v)
}
func easyjson71102b77DecodeGithubComAzagrivinTestProjectCoursesInternalModels1(in *jlexer.Lexer, out *HistoryBtc) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total":
			out.Total = uint32(in.Uint32())
		case "history":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.History = make(map[string]map[string]*BtcDB)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 map[string]*BtcDB
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						v4 = make(map[string]*BtcDB)
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v5 *BtcDB
							if in.IsNull() {
								in.Skip()
								v5 = nil
							} else {
								if v5 == nil {
									v5 = new(BtcDB)
								}
								(*v5).UnmarshalEasyJSON(in)
							}
							(v4)[key] = v5
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.History)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71102b77EncodeGithubComAzagrivinTestProjectCoursesInternalModels1(out *jwriter.Writer, in HistoryBtc) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Total))
	}
	{
		const prefix string = ",\"history\":"
		out.RawString(prefix)
		if in.History == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.History {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				if v6Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v7First := true
					for v7Name, v7Value := range v6Value {
						if v7First {
							v7First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v7Name))
						out.RawByte(':')
						if v7Value == nil {
							out.RawString("null")
						} else {
							(*v7Value).MarshalEasyJSON(out)
						}
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HistoryBtc) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson71102b77EncodeGithubComAzagrivinTestProjectCoursesInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HistoryBtc) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson71102b77EncodeGithubComAzagrivinTestProjectCoursesInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HistoryBtc) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson71102b77DecodeGithubComAzagrivinTestProjectCoursesInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HistoryBtc) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson71102b77DecodeGithubComAzagrivinTestProjectCoursesInternalModels1(l, v)
}
func easyjson71102b77DecodeGithubComAzagrivinTestProjectCoursesInternalModels2(in *jlexer.Lexer, out *Btcusdt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Time":
			if in.IsNull() {
				in.Skip()
				out.Time = nil
			} else {
				if out.Time == nil {
					out.Time = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Time).UnmarshalJSON(data))
				}
			}
		case "Buy":
			out.Buy = float64(in.Float64())
		case "Sell":
			out.Sell = float64(in.Float64())
		case "High":
			out.High = float64(in.Float64())
		case "Low":
			out.Low = float64(in.Float64())
		case "Last":
			out.Last = float64(in.Float64())
		case "AveragePrice":
			out.AveragePrice = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71102b77EncodeGithubComAzagrivinTestProjectCoursesInternalModels2(out *jwriter.Writer, in Btcusdt) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Time\":"
		out.RawString(prefix[1:])
		if in.Time == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Time).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"Buy\":"
		out.RawString(prefix)
		out.Float64(float64(in.Buy))
	}
	{
		const prefix string = ",\"Sell\":"
		out.RawString(prefix)
		out.Float64(float64(in.Sell))
	}
	{
		const prefix string = ",\"High\":"
		out.RawString(prefix)
		out.Float64(float64(in.High))
	}
	{
		const prefix string = ",\"Low\":"
		out.RawString(prefix)
		out.Float64(float64(in.Low))
	}
	{
		const prefix string = ",\"Last\":"
		out.RawString(prefix)
		out.Float64(float64(in.Last))
	}
	{
		const prefix string = ",\"AveragePrice\":"
		out.RawString(prefix)
		out.Float64(float64(in.AveragePrice))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Btcusdt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson71102b77EncodeGithubComAzagrivinTestProjectCoursesInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Btcusdt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson71102b77EncodeGithubComAzagrivinTestProjectCoursesInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Btcusdt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson71102b77DecodeGithubComAzagrivinTestProjectCoursesInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Btcusdt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson71102b77DecodeGithubComAzagrivinTestProjectCoursesInternalModels2(l, v)
}
func easyjson71102b77DecodeGithubComAzagrivinTestProjectCoursesInternalModels3(in *jlexer.Lexer, out *BtcDB) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "buy":
			out.Buy = float64(in.Float64())
		case "sell":
			out.Sell = float64(in.Float64())
		case "high":
			out.High = float64(in.Float64())
		case "low":
			out.Low = float64(in.Float64())
		case "last":
			out.Last = float64(in.Float64())
		case "average_price":
			out.AveragePrice = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson71102b77EncodeGithubComAzagrivinTestProjectCoursesInternalModels3(out *jwriter.Writer, in BtcDB) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"buy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Buy))
	}
	{
		const prefix string = ",\"sell\":"
		out.RawString(prefix)
		out.Float64(float64(in.Sell))
	}
	{
		const prefix string = ",\"high\":"
		out.RawString(prefix)
		out.Float64(float64(in.High))
	}
	{
		const prefix string = ",\"low\":"
		out.RawString(prefix)
		out.Float64(float64(in.Low))
	}
	{
		const prefix string = ",\"last\":"
		out.RawString(prefix)
		out.Float64(float64(in.Last))
	}
	{
		const prefix string = ",\"average_price\":"
		out.RawString(prefix)
		out.Float64(float64(in.AveragePrice))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BtcDB) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson71102b77EncodeGithubComAzagrivinTestProjectCoursesInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BtcDB) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson71102b77EncodeGithubComAzagrivinTestProjectCoursesInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BtcDB) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson71102b77DecodeGithubComAzagrivinTestProjectCoursesInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BtcDB) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson71102b77DecodeGithubComAzagrivinTestProjectCoursesInternalModels3(l, v)
}
